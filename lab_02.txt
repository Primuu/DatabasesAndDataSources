/* Task 1
DROP TABLE job_history CASCADE CONSTRAINTS;
DROP TABLE employees CASCADE CONSTRAINTS;
DROP TABLE jobs CASCADE CONSTRAINTS;
DROP TABLE departments CASCADE CONSTRAINTS;
DROP TABLE locations CASCADE CONSTRAINTS;
DROP TABLE countries CASCADE CONSTRAINTS;
DROP TABLE regions CASCADE CONSTRAINTS;

/* Task 2
CREATE TABLE regions AS SELECT * FROM HR.regions;
ALTER TABLE regions ADD CONSTRAINT pk_regions PRIMARY KEY (region_id);

CREATE TABLE countries AS SELECT * FROM HR.countries;
ALTER TABLE countries ADD CONSTRAINT pk_countries PRIMARY KEY (country_id);
ALTER TABLE countries ADD CONSTRAINT fk_countries_regions FOREIGN KEY (region_id) REFERENCES regions (region_id);

CREATE TABLE locations AS SELECT * FROM HR.locations;
ALTER TABLE locations ADD CONSTRAINT pk_locations PRIMARY KEY (location_id);
ALTER TABLE locations ADD CONSTRAINT fk_locations_countries FOREIGN KEY (country_id) REFERENCES countries (country_id);

CREATE TABLE departments AS SELECT * FROM HR.departments;
ALTER TABLE departments ADD CONSTRAINT pk_departments PRIMARY KEY (department_id);
ALTER TABLE departments ADD CONSTRAINT fk_departments_locations FOREIGN KEY (location_id) REFERENCES locations (location_id);

CREATE TABLE jobs AS SELECT * FROM HR.jobs;
ALTER TABLE jobs ADD CONSTRAINT pk_jobs PRIMARY KEY (job_id);

CREATE TABLE employees AS SELECT * FROM HR.employees;
ALTER TABLE employees ADD CONSTRAINT pk_employees PRIMARY KEY (employee_id);
ALTER TABLE departments ADD CONSTRAINT fk_departments_employees FOREIGN KEY (manager_id) REFERENCES employees (employee_id);
ALTER TABLE employees ADD CONSTRAINT fk_employees_departments FOREIGN KEY (department_id) REFERENCES departments (department_id);
ALTER TABLE employees ADD CONSTRAINT fk_employees_manager FOREIGN KEY (manager_id) REFERENCES employees (employee_id);
ALTER TABLE employees ADD CONSTRAINT fk_employees_jobs FOREIGN KEY (job_id) REFERENCES jobs (job_id);

CREATE TABLE job_history AS SELECT * FROM HR.job_history;
ALTER TABLE job_history ADD CONSTRAINT pk_job_history PRIMARY KEY (employee_id, start_date);
ALTER TABLE job_history ADD CONSTRAINT fk_job_history_departments FOREIGN KEY (department_id) REFERENCES departments (department_id);
ALTER TABLE job_history ADD CONSTRAINT fk_job_history_employees FOREIGN KEY (employee_id) REFERENCES employees (employee_id);
ALTER TABLE job_history ADD CONSTRAINT fk_job_history_jobs FOREIGN KEY (job_id) REFERENCES jobs (job_id);

/* Task 3
-- 1)
SELECT e.last_name || ' ' || e.salary AS wynagrodzenie 
FROM employees e
WHERE e.department_id IN (20, 50)
    AND e.salary BETWEEN 2000 AND 7000
ORDER BY e.last_name;

-- 2)
SELECT e.hire_date, e.last_name, &&users_column 
FROM employees e
WHERE e.manager_id IS NOT NULL
    AND EXTRACT(YEAR FROM hire_date) = 2005
ORDER BY &&users_column;

-- 3)
SELECT 
        e.first_name || ' ' || e.last_name AS full_name,
        e.salary,
        e.phone_number
FROM
        employees e
WHERE
        SUBSTR(e.last_name, 3, 1) = 'e'
        AND LOWER(e.first_name) LIKE '%' || LOWER(:name_part) || '%'
ORDER BY
        e.salary DESC,
        e.phone_number ASC;

-- 4)
SELECT 
        e.first_name,
        e.last_name,
        ROUND(MONTHS_BETWEEN(
                             COALESCE(jh.end_date, SYSDATE),
                             e.hire_date 
                            )) AS num_of_months,
        CASE 
             WHEN ROUND(MONTHS_BETWEEN(COALESCE(jh.end_date, SYSDATE),e.hire_date)) <= 150 THEN e.salary * 0.1
             WHEN ROUND(MONTHS_BETWEEN(COALESCE(jh.end_date, SYSDATE),e.hire_date)) > 150 
                    AND ROUND(MONTHS_BETWEEN(COALESCE(jh.end_date, SYSDATE),e.hire_date)) <= 200 THEN e.salary * 0.2
             WHEN ROUND(MONTHS_BETWEEN(COALESCE(jh.end_date, SYSDATE),e.hire_date)) > 200 THEN e.salary * 0.3
        END AS salary_supplement
FROM
        employees e
LEFT JOIN
        job_history jh ON e.employee_id = jh.employee_id
        AND e.hire_date = jh.start_date
ORDER BY
        num_of_months DESC;
        
-- 5)
SELECT
        d.department_name,
        SUM(e.salary) AS earnings_sum,
        ROUND(AVG(e.salary)) AS earnings_avg
FROM
        employees e
JOIN 
        departments d ON e.department_id = d.department_id
GROUP BY
        d.department_id, d.department_name
HAVING
        MIN(e.salary) > 5000;

-- 6)
SELECT
        e.last_name,
        d.department_id,
        d.department_name,
        e.job_id
FROM
        employees e
JOIN
        departments d ON e.department_id = d.department_id
JOIN
        locations l ON d.location_id = l.location_id
WHERE
        l.city = 'Toronto';

-- 7)
SELECT
        e1.first_name || ' ' || e1.last_name AS full_name,
        e2.first_name || ' ' || e2.last_name AS coworker_full_name
FROM
        employees e1
JOIN
        employees e2 ON e1.department_id = e2.department_id
WHERE
        e1.first_name = 'Jennifer'
        AND e1.employee_id != e2.employee_id;

-- 8)
SELECT 
    d.department_id,
    d.department_name
FROM 
    departments d
LEFT JOIN 
    employees e ON d.department_id = e.department_id
WHERE 
    e.employee_id IS NULL;

-- 9)
CREATE TABLE job_grades AS SELECT * FROM HR.job_grades;

-- 10)
SELECT 
        e.first_name,
        e.last_name,
        e.job_id,
        d.department_name,
        e.salary,
        jg.grade
FROM 
        employees e
JOIN 
        departments d ON e.department_id  = d.department_id
JOIN
        job_grades jg ON e.salary BETWEEN jg.min_salary AND jg.max_salary;

-- 11)
SELECT 
        e1.first_name || ' ' || e1.last_name AS full_name,
        e1.salary
FROM
        employees e1
WHERE 1=1 
        AND e1.salary > (SELECT AVG(e2.salary) FROM employees e2)
ORDER BY
        e1.salary DESC;

-- 12)
SELECT DISTINCT
    e1.employee_id,
    e1.first_name,
    e1.last_name
FROM 
    employees e1
WHERE 
    EXISTS (
        SELECT 1
        FROM employees e2
        WHERE 
            e2.department_id = e1.department_id
            AND e2.last_name LIKE '%u%'
            AND e2.employee_id != e1.employee_id
    )
;



