-- FUNCTIONS
-- 1)
CREATE OR REPLACE FUNCTION get_job_title(
    p_job_id jobs.job_id%TYPE
) RETURN jobs.job_title%TYPE
IS
    v_job_title jobs.job_title%TYPE;
BEGIN
    SELECT job_title
    INTO v_job_title
    FROM jobs
    WHERE job_id = p_job_id;
    
    RETURN v_job_title;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20004,  'Job not found.');
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(get_job_title('AD_PRES')); -- President
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(get_job_title('DEV_X')); -- ORA-20004: Job not found.
END;
/

-- 2)
CREATE OR REPLACE FUNCTION get_annual_salary(
    p_employee_id employees.employee_id%TYPE
) RETURN NUMBER
IS
    v_monthly_salary employees.salary%TYPE;
    v_commission_pct employees.commission_pct%TYPE;
    v_annual_salary NUMBER;
BEGIN
    SELECT salary, NVL(commission_pct, 0)
    INTO v_monthly_salary, v_commission_pct
    FROM employees
    WHERE employee_id = p_employee_id;
    
    v_annual_salary := (v_monthly_salary * 12) + (v_monthly_salary * 12 * v_commission_pct);
    
    RETURN v_annual_salary;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20005,  'Employee not found.');
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(get_annual_salary(101)); -- 204000
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(get_annual_salary(1)); -- ORA-20005: Employee not found.
END;
/

-- 3)
CREATE OR REPLACE FUNCTION format_phone_num(
    p_phone_num VARCHAR2
) RETURN VARCHAR2
IS
    v_formatted_number VARCHAR2(20);
BEGIN
    v_formatted_number  := '(' || SUBSTR(p_phone_num, 1, 3) || ') ' ||
                            SUBSTR(p_phone_num, 5, LENGTH(p_phone_num));
    
    RETURN v_formatted_number;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE('Formatted Phone Number: ' || format_phone_num('123 456-7890')); -- Formatted Phone Number: (123) 456-7890
END;
/

-- 4)
CREATE OR REPLACE FUNCTION capitalize_first_last(
    p_string VARCHAR2
) RETURN VARCHAR2
IS
    v_result VARCHAR(1000);
BEGIN
    IF p_string IS NULL OR LENGTH(p_string) = 0 THEN
        RETURN NULL;
    END IF;
    
    IF LENGTH(p_string) = 1 THEN
        v_result := UPPER(p_string);
    END IF;
    
    IF LENGTH(p_string) > 1 THEN
        v_result := UPPER(SUBSTR(p_string, 1, 1)) ||
                    LOWER(SUBSTR(p_string, 2, LENGTH(p_string) - 2)) ||
                    UPPER(SUBSTR(p_string, -1));
    END IF;
    
    RETURN v_result;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE('Formatted String: ' || capitalize_first_last('this is EXAMPLE to ChAnGE')); -- Formatted String: This is example to changE
END;
/

-- 5)
CREATE OR REPLACE FUNCTION pesel_to_birthdate(
    p_pesel VARCHAR2
) RETURN VARCHAR2
IS
    v_year VARCHAR2(4);
    v_month VARCHAR2(2);
    v_day VARCHAR2(2);
BEGIN
    IF LENGTH(p_pesel) != 11 THEN
        RAISE_APPLICATION_ERROR(-20006, 'Invalid pesel length.');
    END IF;
    
    v_year := SUBSTR(p_pesel, 1, 2);
    v_month := SUBSTR(p_pesel, 3, 2);
    v_day := SUBSTR(p_pesel, 5, 2);
    
    IF v_month BETWEEN '01' AND '12' THEN
        v_year := '19' || v_year;
    ELSIF v_month BETWEEN '21' AND '32' THEN
        v_year := '20' || v_year;
        v_month := TO_CHAR(TO_NUMBER(v_month) - 20, 'FM00');
    ELSE
        RAISE_APPLICATION_ERROR(-20007, 'Invalid pesel.');
    END IF;
    
    RETURN v_year || '-' || v_month || '-' || v_day;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

BEGIN
        DBMS_OUTPUT.PUT_LINE(pesel_to_birthdate('72121792528')); -- 1972-12-17
        DBMS_OUTPUT.PUT_LINE(pesel_to_birthdate('01220327351')); -- 2001-02-03
END;
/

-- 6)
CREATE OR REPLACE FUNCTION get_num_of_employees_and_departments(
    p_country_name countries.country_name%TYPE
) RETURN VARCHAR2
IS
    v_emp_count NUMBER;
    v_dep_count NUMBER;
    v_country_exists NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_country_exists
    FROM countries
    WHERE country_name = p_country_name;

    IF v_country_exists = 0 THEN
        RAISE_APPLICATION_ERROR(-20007, 'Country does not exist.');
    END IF;
    
    SELECT COUNT(e.employee_id), COUNT(d.department_id)
    INTO v_emp_count, v_dep_count
    FROM employees e
    JOIN departments d ON e.department_id = d.department_id
    JOIN locations l ON d.location_id = l.location_id
    JOIN countries c ON l.country_id = c.country_id
    WHERE c.country_name = p_country_name;
    
    RETURN 'Employees: ' || v_emp_count || ' , Departments: ' || v_dep_count;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

BEGIN
        DBMS_OUTPUT.PUT_LINE(get_num_of_employees_and_departments('Argentina')); -- Employees: 0 , Departments: 0
        DBMS_OUTPUT.PUT_LINE(get_num_of_employees_and_departments('Poooland')); -- Error: ORA-20007: Country does not exist.
END;
/

-- TRIGGERS
-- 1)
CREATE TABLE archive_departaments (
    department_id NUMBER PRIMARY KEY,
    department_name VARCHAR(255),
    closing_date DATE,
    last_manager VARCHAR2(255)
);

CREATE OR REPLACE TRIGGER trg_archive_departaments
AFTER DELETE ON departments
FOR EACH ROW
DECLARE
    v_manager_name VARCHAR2(255);
BEGIN
    SELECT first_name || ' '  || last_name
    INTO v_manager_name
    FROM employees
    WHERE employee_id = :OLD.manager_id;

    INSERT INTO archive_departaments VALUES (
        :OLD.department_id,
        :OLD.department_name,
        SYSDATE,
        v_manager_name
    );
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        INSERT INTO archive_departaments VALUES (
            :OLD.department_id,
            :OLD.department_name,
            SYSDATE,
            NULL
        );
END;
/

INSERT INTO departments (department_id, department_name, manager_id, location_id)
VALUES (1000, 'HR', 101, 1700);

DELETE FROM departments WHERE department_id = 1000;

SELECT * FROM archive_departaments; -- (1000, 'HR', 101, 1700)

-- 2)
CREATE TABLE thief(
    log_id NUMBER PRIMARY KEY,
    user_name VARCHAR(255),
    mod_time TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE SEQUENCE thief_seq
START WITH 1
INCREMENT BY 1 
NOCACHE;
/

CREATE OR REPLACE TRIGGER trg_catch_thief
BEFORE INSERT OR UPDATE ON employees
FOR EACH ROW
DECLARE
    PRAGMA AUTONOMOUS_TRANSACTION;
    v_user_name VARCHAR2(255);
BEGIN
    SELECT USER INTO v_user_name FROM DUAL;
    
    IF :NEW.salary < 2000 OR :NEW.salary > 26000 THEN
        INSERT INTO thief (log_id, user_name, mod_time)
        VALUES (thief_seq.NEXTVAL, v_user_name, SYSTIMESTAMP);
        
        COMMIT;
    
        RAISE_APPLICATION_ERROR(-20008, 'Salary must be between 2k-26k.');
    END IF;
END;
/


UPDATE employees
SET salary = 300000
WHERE employee_id = 103;

SELECT * FROM thief; -- (1, TRENTOWSKIA, 24/12/03 13:39:21,959000000)

-- 3)
CREATE SEQUENCE employees_seq
START WITH 1
INCREMENT BY 1 
NOCACHE;
/

CREATE OR REPLACE TRIGGER trg_auto_increment_employees
BEFORE INSERT ON employees
FOR EACH ROW
BEGIN
    IF :NEW.employee_id IS NULL THEN
        :NEW.employee_id := employees_seq.NEXTVAL;
    END IF;
END;
/

INSERT INTO employees (first_name, last_name, salary, email, hire_date, job_id)
VALUES ('John', 'Smith', 3000, 'example@email.com', SYSDATE, 'AD_PRES');

-- 4)
CREATE OR REPLACE TRIGGER trg_restrict_job_grades
BEFORE INSERT OR UPDATE OR DELETE ON job_grades
FOR EACH ROW
BEGIN
    RAISE_APPLICATION_ERROR(-20009, 'Operations on job_grades not allowed.');
END;
/


INSERT INTO job_grades (grade, min_salary, max_salary)
VALUES ('A', 1000, 3000); -- Operations on job_grades not allowed.

-- 5)
CREATE OR REPLACE TRIGGER tgr_preserve_salary_values
BEFORE UPDATE ON jobs
FOR EACH ROW
BEGIN
    IF :NEW.min_salary != :OLD.min_salary THEN
        :NEW.min_salary := :OLD.min_salary;
    END IF;
    
    IF :NEW.max_salary != :OLD.max_salary THEN
        :NEW.max_salary := :OLD.max_salary;
    END IF;
END;
/

SELECT * FROM jobs where job_id='AD_PRES'; -- AD_PRES	President	20080	40000

UPDATE jobs
SET min_salary = 5000, max_salary = 15000
WHERE job_id = 'AD_PRES';

SELECT * FROM jobs where job_id='AD_PRES'; -- AD_PRES	President	20080	40000

-- PACKAGES
-- 1)
CREATE OR REPLACE PACKAGE hr_package IS

    FUNCTION get_job_title(
        p_job_id jobs.job_id%TYPE
    ) RETURN jobs.job_title%TYPE;

    FUNCTION get_annual_salary(
        p_employee_id employees.employee_id%TYPE
    ) RETURN NUMBER;

    FUNCTION format_phone_num(
        p_phone_num VARCHAR2
    ) RETURN VARCHAR2;

    FUNCTION capitalize_first_last(
        p_string VARCHAR2
    ) RETURN VARCHAR2;

    FUNCTION pesel_to_birthdate(
        p_pesel VARCHAR2
    ) RETURN VARCHAR2;

    FUNCTION get_num_of_employees_and_departments(
        p_country_name countries.country_name%TYPE
    ) RETURN VARCHAR2;

END hr_package;
/

CREATE OR REPLACE PACKAGE BODY hr_package IS

    FUNCTION get_job_title(
        p_job_id jobs.job_id%TYPE
    ) RETURN jobs.job_title%TYPE IS
        v_job_title jobs.job_title%TYPE;
    BEGIN
        SELECT job_title
        INTO v_job_title
        FROM jobs
        WHERE job_id = p_job_id;

        RETURN v_job_title;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20004, 'Job not found.');
    END get_job_title;

    FUNCTION get_annual_salary(
        p_employee_id employees.employee_id%TYPE
    ) RETURN NUMBER IS
        v_monthly_salary employees.salary%TYPE;
        v_commission_pct employees.commission_pct%TYPE;
        v_annual_salary NUMBER;
    BEGIN
        SELECT salary, NVL(commission_pct, 0)
        INTO v_monthly_salary, v_commission_pct
        FROM employees
        WHERE employee_id = p_employee_id;

        v_annual_salary := (v_monthly_salary * 12) + (v_monthly_salary * 12 * v_commission_pct);

        RETURN v_annual_salary;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20005, 'Employee not found.');
    END get_annual_salary;

    FUNCTION format_phone_num(
        p_phone_num VARCHAR2
    ) RETURN VARCHAR2 IS
        v_formatted_number VARCHAR2(20);
    BEGIN
        v_formatted_number := '(' || SUBSTR(p_phone_num, 1, 3) || ') ' ||
                              SUBSTR(p_phone_num, 5, LENGTH(p_phone_num));

        RETURN v_formatted_number;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20006, 'Error formatting phone number.');
    END format_phone_num;

    FUNCTION capitalize_first_last(
        p_string VARCHAR2
    ) RETURN VARCHAR2 IS
        v_result VARCHAR2(1000);
    BEGIN
        IF p_string IS NULL OR LENGTH(p_string) = 0 THEN
            RETURN NULL;
        END IF;

        IF LENGTH(p_string) = 1 THEN
            v_result := UPPER(p_string);
        ELSE
            v_result := UPPER(SUBSTR(p_string, 1, 1)) ||
                        LOWER(SUBSTR(p_string, 2, LENGTH(p_string) - 2)) ||
                        UPPER(SUBSTR(p_string, -1));
        END IF;

        RETURN v_result;
    END capitalize_first_last;

    FUNCTION pesel_to_birthdate(
        p_pesel VARCHAR2
    ) RETURN VARCHAR2 IS
        v_year VARCHAR2(4);
        v_month VARCHAR2(2);
        v_day VARCHAR2(2);
    BEGIN
        IF LENGTH(p_pesel) != 11 THEN
            RAISE_APPLICATION_ERROR(-20007, 'Invalid PESEL length.');
        END IF;

        v_year := SUBSTR(p_pesel, 1, 2);
        v_month := SUBSTR(p_pesel, 3, 2);
        v_day := SUBSTR(p_pesel, 5, 2);

        IF v_month BETWEEN '01' AND '12' THEN
            v_year := '19' || v_year;
        ELSIF v_month BETWEEN '21' AND '32' THEN
            v_year := '20' || v_year;
            v_month := TO_CHAR(TO_NUMBER(v_month) - 20, 'FM00');
        ELSE
            RAISE_APPLICATION_ERROR(-20008, 'Invalid PESEL.');
        END IF;

        RETURN v_year || '-' || v_month || '-' || v_day;
    END pesel_to_birthdate;

    FUNCTION get_num_of_employees_and_departments(
        p_country_name countries.country_name%TYPE
    ) RETURN VARCHAR2 IS
        v_emp_count NUMBER;
        v_dep_count NUMBER;
        v_country_exists NUMBER;
    BEGIN
        SELECT COUNT(*)
        INTO v_country_exists
        FROM countries
        WHERE country_name = p_country_name;

        IF v_country_exists = 0 THEN
            RAISE_APPLICATION_ERROR(-20009, 'Country does not exist.');
        END IF;

        SELECT COUNT(e.employee_id), COUNT(DISTINCT d.department_id)
        INTO v_emp_count, v_dep_count
        FROM employees e
        JOIN departments d ON e.department_id = d.department_id
        JOIN locations l ON d.location_id = l.location_id
        JOIN countries c ON l.country_id = c.country_id
        WHERE c.country_name = p_country_name;

        RETURN 'Employees: ' || v_emp_count || ', Departments: ' || v_dep_count;
    END get_num_of_employees_and_departments;
    
END hr_package;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(hr_package.get_job_title('AD_PRES')); -- President
END;
/

-- 2)
CREATE OR REPLACE PACKAGE regions_package IS

    PROCEDURE add_region(
        p_region_id   regions.region_id%TYPE,
        p_region_name regions.region_name%TYPE
    );

    FUNCTION get_region_by_id(
        p_region_id regions.region_id%TYPE
    ) RETURN regions.region_name%TYPE;

    FUNCTION get_all_regions RETURN CLOB;

    PROCEDURE update_region_name(
        p_region_id   regions.region_id%TYPE,
        p_region_name regions.region_name%TYPE
    );

    PROCEDURE delete_region(
        p_region_id regions.region_id%TYPE
    );
END regions_package;
/

CREATE OR REPLACE PACKAGE BODY regions_package IS

    PROCEDURE add_region(
        p_region_id   regions.region_id%TYPE,
        p_region_name regions.region_name%TYPE
    ) IS
    BEGIN
        INSERT INTO regions (region_id, region_name)
        VALUES (p_region_id, p_region_name);

        DBMS_OUTPUT.PUT_LINE('Region added successfully.');
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            RAISE_APPLICATION_ERROR(-20010, 'Region id already exists.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20011, 'Error: ' || SQLERRM);
    END add_region;

    FUNCTION get_region_by_id(
        p_region_id regions.region_id%TYPE
    ) RETURN regions.region_name%TYPE IS
        v_region_name regions.region_name%TYPE;
    BEGIN
        SELECT region_name
        INTO v_region_name
        FROM REGIONS
        WHERE region_id = p_region_id;

        RETURN v_region_name;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20012, 'Region not found.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20013, 'Error: ' || SQLERRM);
    END get_region_by_id;

    FUNCTION get_all_regions RETURN CLOB IS
        v_regions CLOB;
    BEGIN
        v_regions := '';
        FOR r IN (SELECT region_id, region_name FROM regions ORDER BY region_id) LOOP
            v_regions := v_regions || 'Id: ' || r.region_id || ', Name: ' || r.region_name || CHR(10);
        END LOOP;

        RETURN v_regions;
    END get_all_regions;

    PROCEDURE update_region_name(
        p_region_id   regions.region_id%TYPE,
        p_region_name regions.region_name%TYPE
    ) IS
    BEGIN
        UPDATE regions
        SET region_name = p_region_name
        WHERE region_id = p_region_id;

        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20014, 'Region id does not exist.');
        END IF;

        DBMS_OUTPUT.PUT_LINE('Region updated successfully.');
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20015, 'Error: ' || SQLERRM);
    END update_region_name;

    PROCEDURE delete_region(
        p_region_id regions.region_id%TYPE
    ) IS
    BEGIN
        DELETE FROM regions
        WHERE region_id = p_region_id;

        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20016, 'Region id does not exist.');
        END IF;

        DBMS_OUTPUT.PUT_LINE('Region deleted successfully.');
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20017, 'Error: ' || SQLERRM);
    END delete_region;
END regions_package;
/

BEGIN
    regions_package.add_region(1000, 'Australia');
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(regions_package.get_region_by_id(1000)); -- Australia
END;
/

-- ...
